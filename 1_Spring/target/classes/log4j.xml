<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<!-- 
		appender : 전달 받은 로그를 어디에 출력할 지 결정
			ConsoleAppender			로그를 콘솔에 출력하기 위한 Appender
			JDBCAppender			로그를 DB에 출력하기 위한 Appender
			FileAppender			로그를 파일에 출력하기 위한 Appender
									지정 파일에 로그가 계속 남게 되면 크기가 지나치게 커질 수 있으므로 지속적인 로그 관리가 불가능
			RollingFileAppender		FileAppender를 보완한 개념
									일정 조건 후에 기존 파일을 백업 파일로 바꾸고 다시 처음부터 시작(ex. DailyRollingFileAppender)
			
		layout : 로그를 어떤 형식으로 출력할지 결정
			DateLayout, HTMLLayout, SimpleLayout, XMLLayout, PatternLayout(디버깅에 가장 적합)
			%p : debug, info, warn, error, fatal 등의 priority 출력
			%m : 로그 내용 출력
			%d : 로그 이벤트가 발생한 시간 출력(프로그램 실행 속도를 느리게 함)
				  포맷을 %d{HH:mm:ss, SSS} 같은 형태로 사용하며 SimpleDateFormat에 따른 포맷팅
			%t : 로그 이벤트가 발생된 스레드 이름 출력
			%% : %표시
			%n : 개행 문자 출력
			%c : package 출력
			%c{n} : n(숫자)만큼의 package를 가장 하단부터 역으로 출력
					카테고리가 a, b, c처럼 되어 있다면 %c{2}는 b.c로 출력
			%C : 클래스명 출력, 패키지와 마찬가지로 {n}을 넣을 수 있고 하단부터 역으로 출력
			%F : 로깅이 발생한 프로그램 파일 명 출력
			%l : 로깅이 발생한 caller의 정보 출력
			%L : 로깅이 발생한 caller의 라인 수 출력
			%M : 로깅이 발생한 method 이름 출력
			%r : 애플리케이션 시작 이후부터 로깅이 발생한 시점의 시간(milliseconds)출력
	
	 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<!-- <param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
			<!-- 변환패턴 / priority출력 : (-5 다섯자리만큼 왼쪽 정렬)클래스명 출력 - 로그 내용 출력 후 개행문자 출력 -->
			<param name="ConversionPattern" value="%-5p: (%t)%c -%m(%d)%n" />
			<!-- 내가 지정한 패턴을 보고 로그 출력함 -->
		</layout>
	</appender>
	
	<appender name="myConsole" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p:%C{1}.%M{%L} - %m%n" />
		</layout>
	</appender>
	
	<appender name="myDailyRollingFile" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File" value="/logs/member/login.log"/> <!-- 로그인 내역(로그인한 아이디) 파일로 관리 -->
		<param name="Append" value="true"/> <!-- 이어서 쓰겠다는 설정-->
		<param name="encoding" value="UTF-8"/>
		<param name="DatePattern" value="'.'yyyyMMdd"/>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d{yy-MM-dd HH:mm:ss} [%p] %c{1}.%M{%L} - %m%n"/>
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<!-- 
		발생한 로그들을 받아주는 역할
			주의 : name속성 값에 오타가 있어도 에러가 발생하지 않음
			
		DEBUG < INFO < WARN < ERROR < FATAL
			설정한 level 이상만 출력할 수 있음(ex. level을 info로 설정하면 debug 제외 모두 출력 가능)
			
		FATAL	아주 심각한 에러
		ERROR	어떤 요청 처리 중 문제 발생
		WARN	프로그램 실행에는 문제 없지만 향후 시스템 에러의 원인이 될 수 있는 경고성 메시지	
		INFO	상태 변경과 같은 정보성 메시지
		DEBUG	개발 시 디버그 용도로 사용하는 메시지
		TRACE	디버그 레벨이 너무 광범위한 것을 해결하기 위해 조금 더 상세한 이벤트를 나타내기 위해 사용(경로 추적)
	-->
	<logger name="com.kh.spring">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	
	<!-- additivity="false" : Root Logger로 가지 않겠다. -->
	<logger name="com.kh.spring.log.Log4jTest" additivity="false"> 
		<level value="debug"/>
		<appender-ref ref="console"/>
	</logger>
	
	<logger name="com.kh.spring.member.controller.MemberController" additivity="false"> 
		<level value="debug"/>
		<appender-ref ref="myConsole"/>
		<!-- <appender-ref ref="myDailyRollingFile"/> -->
	</logger>
	
	<logger name="com.kh.spring.common.interceptor.TestInterceptor" additivity="false"> 
		<level value="debug"/>
		<appender-ref ref="myConsole"/>
	</logger>
	
	<logger name="com.kh.spring.common.interceptor.LoginInterceptor" additivity="false"> <!-- 로그인만 파일에 저장하여 관리하도록 분리 -->
		<level value="info"/>
		<appender-ref ref="myDailyRollingFile"/>
	</logger>
	
	<logger name="com.kh.spring.common.aop" additivity="false"> <!-- 패키지 이름까지 (여러 클래스 포함)-->
		<level value="debug"/>
		<appender-ref ref="myConsole"/>		
	</logger>
	
	
<!-- 	<logger name="com.kh.spring.common.interceptor.BoardEnterInterceptor" additivity="false"> 
		<level value="debug"/>
		<appender-ref ref="myConsole"/>
	</logger> -->

	<!-- Root Logger -->
	<!-- 모든 자식 logger들의 출력이 root Logger를 통해 이루어짐 -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" /> <!-- 로그를 어디에(ref참조) 출력할지 결정 -->
	</root>
	
</log4j:configuration>
